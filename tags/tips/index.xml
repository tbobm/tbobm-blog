<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tips on tbobm.dev</title>
    <link>https://blog.tbobm.dev/tags/tips/</link>
    <description>Recent content in Tips on tbobm.dev</description>
    <image>
      <title>tbobm.dev</title>
      <url>https://blog.tbobm.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tbobm.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.133.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Aug 2025 15:20:00 +0200</lastBuildDate>
    <atom:link href="https://blog.tbobm.dev/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multi-stage container images from dev to production</title>
      <link>https://blog.tbobm.dev/posts/multistage-container-images-lambda/</link>
      <pubDate>Sat, 16 Aug 2025 15:20:00 +0200</pubDate>
      <guid>https://blog.tbobm.dev/posts/multistage-container-images-lambda/</guid>
      <description>Multi-stage container images have been a good friend of mine for some time now. They enable projects to package smarter by splitting the build and run phases of a given software.
Intro to multi-stage Let&amp;rsquo;s start with a simple hello world program in Go!
Here is a minimal working example that will be used for our next builds:
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello from Lambda! :)&amp;#34;) } And our initial, easy to use, Dockerfile will look like this:</description>
    </item>
  </channel>
</rss>
