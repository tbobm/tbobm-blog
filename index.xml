<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tbobm.dev</title>
    <link>https://blog.tbobm.dev/</link>
    <description>Recent content on tbobm.dev</description>
    <image>
      <title>tbobm.dev</title>
      <url>https://blog.tbobm.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://blog.tbobm.dev/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.119.0</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 11 Mar 2025 11:30:20 +0200</lastBuildDate>
    <atom:link href="https://blog.tbobm.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Complete health checks and why they matter</title>
      <link>https://blog.tbobm.dev/posts/complete-health-checks/</link>
      <pubDate>Tue, 11 Mar 2025 11:30:20 +0200</pubDate>
      <guid>https://blog.tbobm.dev/posts/complete-health-checks/</guid>
      <description>Standard health checks tell you if an app is running but not if it’s actually working. Complete Health Checks go deeper, verifying dependencies like databases and caches to catch issues early and keep deployments smooth.
In this article, we’ll cover why they matter, how to set them up, and the key differences between liveness and readiness checks—so your services stay reliable and efficient in production.
What are health checks and why are they so useful Having an application that performs some kind of processing is only the first part of the journey.</description>
    </item>
    <item>
      <title>Watermarking pictures (fast) using Pillow and Libvips</title>
      <link>https://blog.tbobm.dev/posts/watermarking-pictures-fast/</link>
      <pubDate>Wed, 13 Nov 2024 13:35:00 +0200</pubDate>
      <guid>https://blog.tbobm.dev/posts/watermarking-pictures-fast/</guid>
      <description>Working in the media processing industry, I very often encounter 2 concepts: adding overlay to images and doing it fast.
As I&amp;rsquo;m very much interested in tackling this problem well enough and using proper tooling for performance efficiency, I explored several options that allow watermarking pictures.
Code is available at github.com/tbobm/watermarking-images-for-fun-and-profit
Watermarking pictures To put things back in context, watermarking is the act of applying an overlay to a media. This can be performed through many different operation and is used to apply branding, establish ownership, or limit usage to a specific audience 1.</description>
    </item>
    <item>
      <title>Tracking Row Level changes in PostgreSQL</title>
      <link>https://blog.tbobm.dev/posts/row-level-database-tracking/</link>
      <pubDate>Mon, 04 Nov 2024 17:17:00 +0200</pubDate>
      <guid>https://blog.tbobm.dev/posts/row-level-database-tracking/</guid>
      <description>Ownerships and modification dates often have a huge role in troubleshooting or understanding how applications work. Making last change metadata available can be a game changer in case of bug hunting or to understand how data behaves without digging through logs for hours.
Let&amp;rsquo;s dive in a way of automating this &amp;ldquo;last update&amp;rdquo; tracking at the row level in Postgresql.
Code is available at github.com/tbobm/postgresql-row-level-changes
Automatically Tracking Row-Level Changes in PostgreSQL Managing changes to database records is a crucial part of maintaining data integrity and transparency in a system.</description>
    </item>
    <item>
      <title>About</title>
      <link>https://blog.tbobm.dev/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.tbobm.dev/about/</guid>
      <description>External publications Black-box monitoring at Meero using k6 @ Medium
Making sure we’re live: how to enjoy testing in production using k6. Fix issues faster by using black-box monitoring to copy user flows in production
Building Efficient, Scalable Media Archives @ Medium
A Deep Dive into Meero’s Open-Source Archiver.</description>
    </item>
    <item>
      <title>Now</title>
      <link>https://blog.tbobm.dev/now/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://blog.tbobm.dev/now/</guid>
      <description>Current topics I work on and main interests.
I love to post stuff on Github and a lot of my stuff is public: github.com/tbobm
TLDR I like to work with highly scalable, efficient and reliable architectures (ideally by building them).
Most of my recent experiences have been focused on Media Processing, giving me a nice canvas to try out Event Driven architectures that can be leveraged by Software Teams.
Coding is now (again) a great part of my day-to-day life, with a strong intent on writing self-maintainable code, easy to read and most importantly, simple things that just work™️ .</description>
    </item>
  </channel>
</rss>
